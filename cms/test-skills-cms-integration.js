#!/usr/bin/env node

/**
 * Script de test et d'initialisation pour la section Skills & Video du CMS
 * 
 * Ce script :
 * 1. Initialise les donn√©es Skills avec les valeurs exactes du HTML
 * 2. Teste l'int√©gration avec l'API
 * 3. Valide la sauvegarde et publication
 */

const { execSync } = require('child_process');

const API_BASE_URL = 'http://localhost:8000/api';

// Donn√©es Skills exactes du HTML services.html
const SKILLS_DATA = {
  description: "My work adapts to each client's unique goals, and whether it's a website, a product, or a mobile app, I'm proficient in all the areas of expertise listed below.",
  skills: [
    { id: 'skill-1', name: 'User Interface', order: 0 },
    { id: 'skill-2', name: 'Prototyping', order: 1 },
    { id: 'skill-3', name: 'User Research', order: 2 },
    { id: 'skill-4', name: 'User Journey', order: 3 },
    { id: 'skill-5', name: 'Design System', order: 4 },
    { id: 'skill-6', name: 'Interface Animation', order: 5 },
    { id: 'skill-7', name: 'User Flow', order: 6 },
    { id: 'skill-8', name: 'UX Audit', order: 7 },
    { id: 'skill-9', name: 'Icon Design', order: 8 },
    { id: 'skill-10', name: 'Creative & Art Direction', order: 9 },
    { id: 'skill-11', name: 'User Persona', order: 10 },
    { id: 'skill-12', name: 'Wireframe', order: 11 }
  ],
  ctaText: "See all projects",
  ctaUrl: "/work",
  video: {
    url: "https://vbportfolio.nyc3.cdn.digitaloceanspaces.com/services-slideshow-small.mp4",
    caption: "Some of my work across the years ‚Äî Lawson Sydney",
    autoplay: true,
    loop: true,
    muted: true
  }
};

const fs = require('fs');
const path = require('path');

function makeRequest(method, url, data = null) {
  try {
    let curlCmd = `curl -s -X ${method} "${url}"`;
    
    if (data) {
      // Cr√©er un fichier temporaire pour les donn√©es JSON
      const tempFile = path.join(__dirname, 'temp-data.json');
      fs.writeFileSync(tempFile, JSON.stringify(data));
      curlCmd += ` -H "Content-Type: application/json" -d @${tempFile}`;
    }
    
    const result = execSync(curlCmd, { encoding: 'utf8' });
    
    // Nettoyer le fichier temporaire
    if (data) {
      const tempFile = path.join(__dirname, 'temp-data.json');
      if (fs.existsSync(tempFile)) {
        fs.unlinkSync(tempFile);
      }
    }
    
    return JSON.parse(result);
  } catch (error) {
    // Nettoyer le fichier temporaire en cas d'erreur
    if (data) {
      const tempFile = path.join(__dirname, 'temp-data.json');
      if (fs.existsSync(tempFile)) {
        fs.unlinkSync(tempFile);
      }
    }
    throw new Error(`Request failed: ${error.message}`);
  }
}

function testAPI() {
  console.log('üîç Test de l\'API Services...\n');
  
  try {
    // Test de connexion √† l'API
    console.log('1. Test de connexion √† l\'API...');
    const healthResponse = makeRequest('GET', `${API_BASE_URL}/services`);
    console.log('‚úÖ API accessible');
    
    // Test de r√©cup√©ration de la section skills
    console.log('\n2. Test de r√©cup√©ration de la section skills...');
    try {
      const skillsResponse = makeRequest('GET', `${API_BASE_URL}/services/skills`);
      console.log('‚úÖ Section skills trouv√©e:', skillsResponse);
    } catch (error) {
      console.log('‚ö†Ô∏è  Section skills non trouv√©e (normal pour la premi√®re fois)');
    }
    
    // Initialisation des donn√©es skills
    console.log('\n3. Initialisation des donn√©es skills...');
    const updateResponse = makeRequest('PUT', `${API_BASE_URL}/services/skills`, SKILLS_DATA);
    
    if (updateResponse.success) {
      console.log('‚úÖ Donn√©es skills initialis√©es avec succ√®s');
      console.log('üìä Donn√©es sauvegard√©es:');
      console.log(`   - Description: "${SKILLS_DATA.description.substring(0, 50)}..."`);
      console.log(`   - Comp√©tences: ${SKILLS_DATA.skills.length} items`);
      console.log(`   - CTA: "${SKILLS_DATA.ctaText}" -> ${SKILLS_DATA.ctaUrl}`);
      console.log(`   - Vid√©o: ${SKILLS_DATA.video.url}`);
      console.log(`   - L√©gende: "${SKILLS_DATA.video.caption}"`);
    } else {
      throw new Error('√âchec de l\'initialisation des donn√©es');
    }
    
    // Test de publication
    console.log('\n4. Test de publication...');
    const publishResponse = makeRequest('POST', `${API_BASE_URL}/services/publish`);
    
    if (publishResponse.success) {
      console.log('‚úÖ Publication r√©ussie');
      console.log(`üìÖ Publi√© √†: ${publishResponse.publishedAt}`);
    } else {
      throw new Error('√âchec de la publication');
    }
    
    // V√©rification finale
    console.log('\n5. V√©rification finale...');
    const finalCheck = makeRequest('GET', `${API_BASE_URL}/services/skills`);
    
    if (finalCheck.success && finalCheck.data) {
      const data = finalCheck.data;
      console.log('‚úÖ V√©rification r√©ussie');
      console.log(`   - ${data.skills.length} comp√©tences charg√©es`);
      console.log(`   - Vid√©o: ${data.video.url ? 'Configur√©e' : 'Non configur√©e'}`);
      console.log(`   - CTA: ${data.ctaText || 'Non configur√©'}`);
      
      // Validation des comp√©tences
      const expectedSkills = ['User Interface', 'Prototyping', 'User Research', 'User Journey', 'Design System'];
      const actualSkills = data.skills.map(s => s.name);
      const hasExpectedSkills = expectedSkills.every(skill => actualSkills.includes(skill));
      
      if (hasExpectedSkills) {
        console.log('‚úÖ Comp√©tences valid√©es (√©chantillon trouv√©)');
      } else {
        console.log('‚ö†Ô∏è  Certaines comp√©tences attendues manquent');
      }
    }
    
    console.log('\nüéâ INT√âGRATION SKILLS CMS R√âUSSIE !');
    console.log('\nüìã R√©sum√©:');
    console.log('   ‚úÖ API fonctionnelle');
    console.log('   ‚úÖ Donn√©es initialis√©es');
    console.log('   ‚úÖ Publication r√©ussie');
    console.log('   ‚úÖ V√©rification OK');
    console.log('\nüöÄ Vous pouvez maintenant utiliser la section Skills dans le CMS');
    console.log('   üëâ Acc√©dez au CMS: http://localhost:3000/services');
    console.log('   üëâ Cliquez sur "Section Skills & Video"');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR lors du test:', error.message);
    
    console.error('\nüîß Actions sugg√©r√©es:');
    console.error('   1. V√©rifiez que le serveur backend est d√©marr√© (port 8000)');
    console.error('   2. V√©rifiez que la base de donn√©es est accessible');
    console.error('   3. V√©rifiez les logs du serveur backend');
    
    process.exit(1);
  }
}

// Fonction pour afficher les comp√©tences du HTML
function displayHTMLSkills() {
  console.log('üìã Comp√©tences extraites du HTML services.html:');
  SKILLS_DATA.skills.forEach((skill, index) => {
    console.log(`   ${index + 1}. ${skill.name}`);
  });
  console.log(`\nüìä Total: ${SKILLS_DATA.skills.length} comp√©tences`);
}

// Ex√©cution du script
function main() {
  console.log('üöÄ SCRIPT D\'INT√âGRATION SKILLS CMS');
  console.log('=====================================\n');
  
  displayHTMLSkills();
  console.log('\n');
  
  testAPI();
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Erreur non g√©r√©e:', reason);
  process.exit(1);
});

// Lancement du script
main();