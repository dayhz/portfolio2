#!/usr/bin/env node

/**
 * Test d'int√©gration pour la section Grid des Services
 * V√©rifie que la section grid est correctement connect√©e √† l'API
 */

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

const API_BASE = 'http://localhost:8000/api';
const CMS_BASE = 'http://localhost:3000';

// Couleurs de test
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Donn√©es de test pour la section grid
const testGridData = {
  services: [
    {
      id: 'service-web',
      number: 1,
      title: 'D√©veloppement Web',
      description: 'Sites web modernes et responsives avec les derni√®res technologies',
      color: '#3B82F6',
      colorClass: 'service-blue',
      order: 0
    },
    {
      id: 'service-mobile',
      number: 2,
      title: 'Applications Mobile',
      description: 'Applications natives et cross-platform pour iOS et Android',
      color: '#10B981',
      colorClass: 'service-green',
      order: 1
    },
    {
      id: 'service-product',
      number: 3,
      title: 'Design Produit',
      description: 'Conception UX/UI centr√©e utilisateur pour vos produits digitaux',
      color: '#F59E0B',
      colorClass: 'service-orange',
      order: 2
    }
  ]
};

async function testAPI() {
  log('\nüîß Test de l\'API Services - Section Grid', 'cyan');
  log('=' .repeat(50), 'cyan');

  try {
    // 1. Test de sant√© de l'API
    log('\n1. Test de sant√© de l\'API...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s "${API_BASE}/services/health"`);
      const healthData = JSON.parse(stdout);
      if (healthData.status === 'ok') {
        log('‚úÖ API Services en ligne', 'green');
      } else {
        throw new Error('API non disponible');
      }
    } catch (error) {
      log('‚ùå API Services non accessible', 'red');
      log('   V√©rifiez que le serveur backend est d√©marr√© sur le port 3001', 'yellow');
      return false;
    }

    // 2. R√©cup√©ration des donn√©es actuelles
    log('\n2. R√©cup√©ration des donn√©es actuelles...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s "${API_BASE}/services/services"`);
      const currentData = JSON.parse(stdout);
      if (currentData.success) {
        log(`‚úÖ Donn√©es r√©cup√©r√©es: ${currentData.data.services?.length || 0} service(s)`, 'green');
      } else {
        log('‚ö†Ô∏è  Aucune donn√©e existante, cr√©ation initiale', 'yellow');
      }
    } catch (error) {
      log('‚ö†Ô∏è  Erreur lors de la r√©cup√©ration des donn√©es', 'yellow');
    }

    // 3. Mise √† jour avec les donn√©es de test
    log('\n3. Mise √† jour avec les donn√©es de test...', 'blue');
    const testDataJson = JSON.stringify(testGridData).replace(/"/g, '\\"');
    try {
      const { stdout } = await execAsync(`curl -s -X PUT -H "Content-Type: application/json" -d "${testDataJson}" "${API_BASE}/services/services"`);
      const updateData = JSON.parse(stdout);
      if (updateData.success) {
        log('‚úÖ Donn√©es mises √† jour avec succ√®s', 'green');
        log(`   Services sauvegard√©s: ${updateData.data.services.length}`, 'green');
      } else {
        throw new Error(`√âchec de la mise √† jour: ${updateData.message}`);
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la mise √† jour: ${error.message}`, 'red');
      return false;
    }

    // 4. Test de publication
    log('\n4. Test de publication...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s -X POST "${API_BASE}/services/publish"`);
      const publishData = JSON.parse(stdout);
      if (publishData.success) {
        log('‚úÖ Publication r√©ussie', 'green');
        log(`   Sections publi√©es: ${publishData.data.publishedSections.join(', ')}`, 'green');
      } else {
        throw new Error(`√âchec de la publication: ${publishData.message}`);
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la publication: ${error.message}`, 'red');
      return false;
    }

    log('\nüéâ Tous les tests API sont pass√©s avec succ√®s !', 'green');
    return true;

  } catch (error) {
    log(`\n‚ùå Erreur lors du test API: ${error.message}`, 'red');
    return false;
  }
}

async function testCMSIntegration() {
  log('\nüñ•Ô∏è  Test d\'int√©gration CMS Frontend', 'cyan');
  log('=' .repeat(50), 'cyan');

  try {
    // Test de base du frontend (v√©rifier qu'il r√©pond)
    log('\n1. Test de disponibilit√© du CMS...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s -o /dev/null -w "%{http_code}" "${CMS_BASE}"`);
      if (stdout.trim() === '200') {
        log('‚úÖ CMS Frontend accessible', 'green');
      } else {
        log('‚ö†Ô∏è  CMS Frontend non accessible (v√©rifiez qu\'il est d√©marr√©)', 'yellow');
      }
    } catch (cmsError) {
      log('‚ö†Ô∏è  CMS Frontend non accessible (v√©rifiez qu\'il est d√©marr√©)', 'yellow');
    }

    // Instructions pour le test manuel
    log('\n2. Test manuel recommand√©:', 'blue');
    log('   üì± Ouvrez votre navigateur sur: http://localhost:3000', 'cyan');
    log('   üìù Naviguez vers: Services Page CMS', 'cyan');
    log('   üéØ Cliquez sur: Section Grid', 'cyan');
    log('   ‚úèÔ∏è  Testez l\'ajout/modification de services', 'cyan');
    log('   üíæ V√©rifiez la sauvegarde et publication', 'cyan');

    log('\nüéâ Instructions d\'int√©gration CMS fournies !', 'green');
    return true;

  } catch (error) {
    log(`\n‚ùå Erreur lors du test CMS: ${error.message}`, 'red');
    return false;
  }
}

async function testFullWorkflow() {
  log('\nüîÑ Test du workflow complet', 'cyan');
  log('=' .repeat(50), 'cyan');

  try {
    // Donn√©es de test pour un workflow complet
    const workflowData = {
      services: [
        {
          id: 'service-workflow-1',
          number: 1,
          title: 'Service Test 1',
          description: 'Description du service de test 1',
          color: '#8B5CF6',
          colorClass: 'service-purple',
          order: 0
        },
        {
          id: 'service-workflow-2',
          number: 2,
          title: 'Service Test 2',
          description: 'Description du service de test 2',
          color: '#EC4899',
          colorClass: 'service-pink',
          order: 1
        }
      ]
    };

    log('\n1. Sauvegarde des donn√©es de workflow...', 'blue');
    const workflowDataJson = JSON.stringify(workflowData).replace(/"/g, '\\"');
    try {
      const { stdout } = await execAsync(`curl -s -X PUT -H "Content-Type: application/json" -d "${workflowDataJson}" "${API_BASE}/services/services"`);
      const saveData = JSON.parse(stdout);
      if (saveData.success) {
        log('‚úÖ Donn√©es de workflow sauvegard√©es', 'green');
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la sauvegarde: ${error.message}`, 'red');
      return false;
    }

    log('\n2. Publication des changements...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s -X POST "${API_BASE}/services/publish"`);
      const publishData = JSON.parse(stdout);
      if (publishData.success) {
        log('‚úÖ Changements publi√©s', 'green');
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la publication: ${error.message}`, 'red');
      return false;
    }

    log('\n3. V√©rification finale...', 'blue');
    try {
      const { stdout } = await execAsync(`curl -s "${API_BASE}/services/services"`);
      const finalData = JSON.parse(stdout);
      if (finalData.success) {
        log(`‚úÖ Workflow complet valid√©: ${finalData.data.services.length} service(s)`, 'green');
      }
    } catch (error) {
      log(`‚ùå Erreur lors de la v√©rification: ${error.message}`, 'red');
      return false;
    }

    log('\nüéâ Workflow complet test√© avec succ√®s !', 'green');
    return true;

  } catch (error) {
    log(`\n‚ùå Erreur lors du test de workflow: ${error.message}`, 'red');
    return false;
  }
}

async function main() {
  log('üöÄ Test d\'int√©gration - Section Grid des Services', 'cyan');
  log('=' .repeat(60), 'cyan');
  log('Ce script teste l\'int√©gration compl√®te de la section grid', 'cyan');
  log('avec l\'API backend et la publication automatique.', 'cyan');

  const results = {
    api: false,
    cms: false,
    workflow: false
  };

  // Test de l'API
  results.api = await testAPI();
  
  // Test d'int√©gration CMS
  results.cms = await testCMSIntegration();
  
  // Test du workflow complet
  results.workflow = await testFullWorkflow();

  // R√©sum√© final
  log('\nüìä R√âSUM√â DES TESTS', 'cyan');
  log('=' .repeat(30), 'cyan');
  log(`API Backend:        ${results.api ? '‚úÖ PASS√â' : '‚ùå √âCHEC'}`, results.api ? 'green' : 'red');
  log(`CMS Frontend:       ${results.cms ? '‚úÖ PASS√â' : '‚ùå √âCHEC'}`, results.cms ? 'green' : 'red');
  log(`Workflow Complet:   ${results.workflow ? '‚úÖ PASS√â' : '‚ùå √âCHEC'}`, results.workflow ? 'green' : 'red');

  const allPassed = results.api && results.cms && results.workflow;
  
  if (allPassed) {
    log('\nüéâ TOUS LES TESTS SONT PASS√âS !', 'green');
    log('La section Grid est correctement int√©gr√©e et fonctionnelle.', 'green');
    log('\nüìù Prochaines √©tapes:', 'blue');
    log('   1. Testez manuellement dans le CMS', 'cyan');
    log('   2. V√©rifiez la publication sur le site public', 'cyan');
    log('   3. Passez √† la section suivante (Skills/Approach/etc.)', 'cyan');
  } else {
    log('\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â', 'yellow');
    log('V√©rifiez les erreurs ci-dessus et corrigez avant de continuer.', 'yellow');
  }

  log('\nüîó Liens utiles:', 'blue');
  log(`   CMS: ${CMS_BASE}`, 'cyan');
  log(`   API: ${API_BASE}/services`, 'cyan');
  log(`   Rendu: ${API_BASE}/services/render`, 'cyan');
}

// Ex√©cution du script
if (require.main === module) {
  main().catch(error => {
    log(`\nüí• Erreur fatale: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { testAPI, testCMSIntegration, testFullWorkflow };