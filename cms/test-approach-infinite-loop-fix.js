#!/usr/bin/env node

/**
 * Test de correction de la boucle infinie dans ApproachEditor
 * V√©rifie que le composant ne cause plus de "Maximum update depth exceeded"
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Test de correction de la boucle infinie - ApproachEditor');
console.log('===========================================================');

// V√©rifier les corrections apport√©es
const approachEditorPath = path.join(__dirname, 'frontend/src/components/services/ApproachEditor.tsx');

if (!fs.existsSync(approachEditorPath)) {
  console.log('‚ùå Fichier ApproachEditor.tsx non trouv√©');
  process.exit(1);
}

const content = fs.readFileSync(approachEditorPath, 'utf8');

console.log('1Ô∏è‚É£ V√©rification des corrections appliqu√©es...');

// V√©rifier que onUnsavedChanges a √©t√© retir√© des d√©pendances
const useEffectPattern = /useEffect\(\(\) => \{[\s\S]*?if \(onUnsavedChanges\)[\s\S]*?\}, \[hasUnsavedChanges\]\);/;
const hasCorrectUseEffect = useEffectPattern.test(content);

if (hasCorrectUseEffect) {
  console.log('‚úÖ useEffect corrig√© - onUnsavedChanges retir√© des d√©pendances');
} else {
  console.log('‚ùå useEffect non corrig√© - risque de boucle infinie');
}

// V√©rifier que handleIconUpload n'a plus de d√©pendance probl√©matique
const iconUploadPattern = /const handleIconUpload = useCallback\([\s\S]*?\}, \[\]\);/;
const hasCorrectIconUpload = iconUploadPattern.test(content);

if (hasCorrectIconUpload) {
  console.log('‚úÖ handleIconUpload corrig√© - d√©pendances vides');
} else {
  console.log('‚ùå handleIconUpload non corrig√© - risque de re-render');
}

// V√©rifier qu'il n'y a pas d'autres useEffect sans d√©pendances
const allUseEffects = content.match(/useEffect\([^}]+\}, \[[^\]]*\]\);/g) || [];
console.log(`üìä Nombre total de useEffect trouv√©s: ${allUseEffects.length}`);

allUseEffects.forEach((effect, index) => {
  console.log(`   ${index + 1}. ${effect.substring(0, 50)}...`);
});

console.log('\n2Ô∏è‚É£ Analyse des patterns probl√©matiques...');

// V√©rifier les patterns qui peuvent causer des boucles infinies
const problematicPatterns = [
  {
    name: 'useEffect sans d√©pendances',
    pattern: /useEffect\([^}]+\}\);/g,
    description: 'useEffect sans tableau de d√©pendances'
  },
  {
    name: 'setState dans useEffect sans condition',
    pattern: /useEffect\([^}]*set[A-Z][^}]*\}, \[[^\]]*\]\);/g,
    description: 'setState direct dans useEffect'
  }
];

let hasProblems = false;

problematicPatterns.forEach(({ name, pattern, description }) => {
  const matches = content.match(pattern) || [];
  if (matches.length > 0) {
    console.log(`‚ö†Ô∏è  ${name}: ${matches.length} occurrence(s) trouv√©e(s)`);
    console.log(`   Description: ${description}`);
    hasProblems = true;
  } else {
    console.log(`‚úÖ ${name}: Aucun probl√®me d√©tect√©`);
  }
});

console.log('\n3Ô∏è‚É£ Recommandations...');

if (!hasProblems && hasCorrectUseEffect && hasCorrectIconUpload) {
  console.log('üéâ Toutes les corrections ont √©t√© appliqu√©es avec succ√®s !');
  console.log('üìù Le composant ApproachEditor devrait maintenant fonctionner sans boucle infinie.');
  console.log('\nüìã Actions recommand√©es:');
  console.log('   1. Red√©marrer le serveur de d√©veloppement');
  console.log('   2. Vider le cache du navigateur (Ctrl+Shift+R)');
  console.log('   3. Tester l\'√©dition de la section Approach');
  console.log('   4. V√©rifier qu\'il n\'y a plus d\'erreur "Maximum update depth exceeded"');
} else {
  console.log('‚ùå Des probl√®mes subsistent dans le code');
  console.log('üìù Corrections n√©cessaires:');
  
  if (!hasCorrectUseEffect) {
    console.log('   - Corriger le useEffect pour onUnsavedChanges');
  }
  
  if (!hasCorrectIconUpload) {
    console.log('   - Corriger handleIconUpload pour √©viter les d√©pendances circulaires');
  }
  
  if (hasProblems) {
    console.log('   - R√©soudre les patterns probl√©matiques identifi√©s');
  }
}

console.log('\nüîç Test termin√© !');
console.log('================');

process.exit(hasProblems || !hasCorrectUseEffect || !hasCorrectIconUpload ? 1 : 0);