#!/usr/bin/env node

/**
 * Test de publication pour TestimonialsEditor
 * V√©rifie que les modifications se r√©percutent sur le site public
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ Test Publication TestimonialsEditor - D√©marrage');

// V√©rifier le fichier services.html actuel
const servicesHtmlPath = path.join(__dirname, '../portfolio2/www.victorberbel.work/services.html');

if (!fs.existsSync(servicesHtmlPath)) {
  console.error('‚ùå Fichier services.html non trouv√©');
  process.exit(1);
}

const servicesHtmlContent = fs.readFileSync(servicesHtmlPath, 'utf8');

console.log('\nüìÑ Analyse du fichier services.html actuel...\n');

// Analyser la structure des t√©moignages existants
const testimonialMatches = servicesHtmlContent.match(/<div class="testimonials-card"[^>]*>[\s\S]*?<\/div>\s*<\/div>\s*<\/div>/g);

if (testimonialMatches) {
  console.log(`‚úÖ ${testimonialMatches.length} t√©moignages trouv√©s dans le HTML statique`);
  
  testimonialMatches.forEach((testimonial, index) => {
    // Extraire le texte du t√©moignage
    const textMatch = testimonial.match(/<div class="testimonial-text[^>]*">\s*([^<]+)/);
    const nameMatch = testimonial.match(/<div class="u-text-style-big">\s*([^<]+)/);
    
    if (textMatch && nameMatch) {
      console.log(`   ${index + 1}. ${nameMatch[1].trim()}`);
      console.log(`      "${textMatch[1].trim().substring(0, 50)}..."`);
    }
  });
} else {
  console.log('‚ùå Aucun t√©moignage trouv√© dans le HTML statique');
}

console.log('\nüîç V√©rification de la structure HTML...\n');

// Tests de structure HTML
const structureTests = [
  {
    name: 'Section testimonials pr√©sente',
    test: () => servicesHtmlContent.includes('testimonials-card'),
    description: 'V√©rifie que la section testimonials existe'
  },
  {
    name: 'Slider de t√©moignages',
    test: () => servicesHtmlContent.includes('clientes-slide') && servicesHtmlContent.includes('w-slider-mask'),
    description: 'V√©rifie que le slider est pr√©sent'
  },
  {
    name: 'Structure des cartes',
    test: () => servicesHtmlContent.includes('testimonials-card-left') && servicesHtmlContent.includes('testimonials-card-right'),
    description: 'V√©rifie la structure des cartes de t√©moignages'
  },
  {
    name: 'Avatars des auteurs',
    test: () => servicesHtmlContent.includes('testimonials-avatar'),
    description: 'V√©rifie que les avatars sont pr√©sents'
  },
  {
    name: 'Images de projets',
    test: () => servicesHtmlContent.includes('testimonials-person-thumb'),
    description: 'V√©rifie que les images de projets sont pr√©sentes'
  }
];

let structurePassed = 0;
let structureFailed = 0;

structureTests.forEach((test, index) => {
  try {
    const result = test.test();
    if (result) {
      console.log(`‚úÖ ${test.name}`);
      console.log(`   ${test.description}`);
      structurePassed++;
    } else {
      console.log(`‚ùå ${test.name}`);
      console.log(`   ${test.description}`);
      structureFailed++;
    }
  } catch (error) {
    console.log(`‚ùå ${test.name} (Erreur: ${error.message})`);
    structureFailed++;
  }
  console.log('');
});

console.log('üîß V√©rification du backend...\n');

// V√©rifier le service backend
const servicesServicePath = path.join(__dirname, 'backend/src/services/servicesService.ts');
const servicesServiceContent = fs.readFileSync(servicesServicePath, 'utf8');

const backendTests = [
  {
    name: 'Fonction publishContent existe',
    test: () => servicesServiceContent.includes('publishContent'),
    description: 'V√©rifie que la fonction de publication existe'
  },
  {
    name: 'Gestion des testimonials',
    test: () => servicesServiceContent.includes('TestimonialsData') && servicesServiceContent.includes('testimonials'),
    description: 'V√©rifie que les testimonials sont g√©r√©s'
  },
  {
    name: 'TODO publication identifi√©',
    test: () => servicesServiceContent.includes('TODO') && servicesServiceContent.includes('publishing'),
    description: 'V√©rifie que le TODO pour la publication est identifi√©'
  }
];

let backendPassed = 0;
let backendFailed = 0;

backendTests.forEach((test, index) => {
  try {
    const result = test.test();
    if (result) {
      console.log(`‚úÖ ${test.name}`);
      console.log(`   ${test.description}`);
      backendPassed++;
    } else {
      console.log(`‚ùå ${test.name}`);
      console.log(`   ${test.description}`);
      backendFailed++;
    }
  } catch (error) {
    console.log(`‚ùå ${test.name} (Erreur: ${error.message})`);
    backendFailed++;
  }
  console.log('');
});

console.log('üí° Analyse des besoins...\n');

// Analyser ce qui manque pour la publication
console.log('üìã Ce qui est n√©cessaire pour la publication des testimonials:');
console.log('');
console.log('1. üîß Fonction de g√©n√©ration HTML');
console.log('   ‚Ä¢ Transformer les donn√©es testimonials en HTML');
console.log('   ‚Ä¢ Respecter la structure existante du slider');
console.log('   ‚Ä¢ G√©rer les avatars et images de projets');
console.log('');
console.log('2. üìù Mise √† jour du fichier services.html');
console.log('   ‚Ä¢ Remplacer la section testimonials existante');
console.log('   ‚Ä¢ Pr√©server le reste du HTML');
console.log('   ‚Ä¢ Maintenir les classes CSS et animations');
console.log('');
console.log('3. üîÑ Int√©gration dans publishContent()');
console.log('   ‚Ä¢ Appeler la g√©n√©ration HTML lors de la publication');
console.log('   ‚Ä¢ G√©rer les erreurs de g√©n√©ration');
console.log('   ‚Ä¢ Invalider les caches appropri√©s');
console.log('');

// Proposer une solution
console.log('üéØ Solution propos√©e:');
console.log('');
console.log('1. Cr√©er une fonction generateTestimonialsHTML()');
console.log('2. Int√©grer dans servicesService.publishContent()');
console.log('3. Tester avec des donn√©es de test');
console.log('4. Valider que les modifications apparaissent sur le site');
console.log('');

// R√©sultats
const totalTests = structureTests.length + backendTests.length;
const totalPassed = structurePassed + backendPassed;
const totalFailed = structureFailed + backendFailed;

console.log('üìä R√©sultats de l\'analyse:');
console.log(`üìÑ Structure HTML: ${structurePassed}/${structureTests.length} OK`);
console.log(`üîß Backend: ${backendPassed}/${backendTests.length} OK`);
console.log(`‚úÖ Total: ${totalPassed}/${totalTests} OK`);
console.log(`üìà Taux de r√©ussite: ${Math.round((totalPassed / totalTests) * 100)}%`);

if (totalPassed === totalTests) {
  console.log('\nüéâ Structure pr√™te ! Il faut maintenant impl√©menter la g√©n√©ration HTML');
} else {
  console.log('\n‚ö†Ô∏è  Quelques √©l√©ments √† v√©rifier avant d\'impl√©menter la publication');
}

console.log('\nüèÅ Analyse termin√©e');

// Retourner le code de sortie appropri√©
process.exit(totalFailed > 0 ? 1 : 0);