#!/usr/bin/env node

/**
 * Test de publication HTML pour la section Approach
 * Valide que les modifications CMS sont correctement appliqu√©es au HTML
 */

const fs = require('fs');
const path = require('path');
const axios = require('axios');

const API_BASE_URL = 'http://localhost:8000/api';
const HTML_FILE_PATH = path.join(__dirname, '../portfolio2/www.victorberbel.work/services.html');

// Donn√©es de test pour la section Approach
const testApproachData = {
  title: "Mon Processus de Travail",
  description: "L'√©quilibre id√©al entre UX et UI est ce qui fait un produit gagnant. Le sweet spot est la combinaison des deux, et mon processus en quatre √©tapes vous donne le framework ultime pour le design.",
  video: {
    url: "https://vbportfolio.nyc3.cdn.digitaloceanspaces.com/sweet-spot-60fps-updated.mp4",
    caption: "Animation du sweet spot mise √† jour",
    autoplay: true,
    loop: true,
    muted: true
  },
  ctaText: "Travaillons ensemble !",
  ctaUrl: "/contact",
  steps: [
    {
      id: "step-1",
      number: 1,
      title: "D√©couverte",
      description: "Quand un nouveau contrat commence, je veux tout apprendre sur votre projet et comprendre quel est l'objectif final. Nous collaborerons sur une solution et ce qui est requis pour vous y amener.",
      icon: "",
      order: 1
    },
    {
      id: "step-2", 
      number: 2,
      title: "Wireframe",
      description: "Quand l'objectif est d√©fini, je commencerai √† travailler sur un wireframe pour organiser toutes les informations discut√©es plus t√¥t et adresser les probl√®mes UX qui peuvent survenir.",
      icon: "",
      order: 2
    },
    {
      id: "step-3",
      number: 3,
      title: "Mood Board", 
      description: "Nous avons tous des go√ªts et pr√©f√©rences diff√©rents et pour aller avec la meilleure direction de design pour votre projet, je cr√©erai des mood boards pour discuter lequel est le meilleur pour vous.",
      icon: "",
      order: 3
    },
    {
      id: "step-4",
      number: 4,
      title: "Design",
      description: "Maintenant que les √©tapes pr√©c√©dentes ont √©t√© compl√©t√©es, il est temps de travailler sur l'UI, en utilisant le wireframe approuv√© et le mood board comme guide pour cr√©er un design g√©nial.",
      icon: "",
      order: 4
    }
  ]
};

async function testApproachPublish() {
  console.log('üß™ Test de publication HTML - Section Approach');
  console.log('='.repeat(50));

  try {
    // 1. Sauvegarder les donn√©es de test
    console.log('\n1Ô∏è‚É£ Sauvegarde des donn√©es de test...');
    const updateResponse = await axios.put(`${API_BASE_URL}/services/approach`, testApproachData);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ Donn√©es sauvegard√©es');
    } else {
      console.log('‚ùå √âchec de la sauvegarde');
      return;
    }

    // 2. Lire le HTML avant publication
    console.log('\n2Ô∏è‚É£ Lecture du HTML avant publication...');
    const htmlBefore = fs.readFileSync(HTML_FILE_PATH, 'utf8');
    
    // Extraire les √©l√©ments actuels
    const titleMatch = htmlBefore.match(/<div class="u-text-style-h2"[^>]*>\s*([^<]+)\s*<\/div>/);
    const descriptionMatch = htmlBefore.match(/<div class="u-text-style-big">\s*([^<]+)\s*<\/div>/);
    const videoMatch = htmlBefore.match(/<source src="([^"]+)"/);
    const ctaMatch = htmlBefore.match(/<div class="text-link is-footer">\s*([^<]+)\s*<\/div>/);
    
    console.log('üìÑ Contenu HTML actuel:');
    console.log(`   - Titre: ${titleMatch ? titleMatch[1].trim() : 'Non trouv√©'}`);
    console.log(`   - Description: ${descriptionMatch ? descriptionMatch[1].substring(0, 50) + '...' : 'Non trouv√©'}`);
    console.log(`   - Vid√©o: ${videoMatch ? videoMatch[1] : 'Non trouv√©'}`);
    console.log(`   - CTA: ${ctaMatch ? ctaMatch[1].trim() : 'Non trouv√©'}`);

    // 3. Publier les changements
    console.log('\n3Ô∏è‚É£ Publication des changements...');
    const publishResponse = await axios.post(`${API_BASE_URL}/services/publish`);
    
    if (publishResponse.status === 200) {
      console.log('‚úÖ Publication r√©ussie');
    } else {
      console.log('‚ùå √âchec de la publication');
      return;
    }

    // 4. Attendre un peu pour que les changements soient appliqu√©s
    console.log('\n4Ô∏è‚É£ Attente de l\'application des changements...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 5. Lire le HTML apr√®s publication
    console.log('\n5Ô∏è‚É£ V√©rification du HTML apr√®s publication...');
    const htmlAfter = fs.readFileSync(HTML_FILE_PATH, 'utf8');
    
    // V√©rifier les changements
    let changesDetected = 0;
    
    // V√©rifier le titre
    const newTitleMatch = htmlAfter.match(/<div class="u-text-style-h2"[^>]*>\s*([^<]+)\s*<\/div>/);
    if (newTitleMatch && newTitleMatch[1].trim() === testApproachData.title) {
      console.log('‚úÖ Titre mis √† jour correctement');
      changesDetected++;
    } else {
      console.log(`‚ùå Titre non mis √† jour. Attendu: "${testApproachData.title}", Trouv√©: "${newTitleMatch ? newTitleMatch[1].trim() : 'Non trouv√©'}"`);
    }
    
    // V√©rifier la description
    const newDescriptionMatch = htmlAfter.match(/<div class="u-text-style-big">\s*([^<]+)\s*<\/div>/);
    if (newDescriptionMatch && newDescriptionMatch[1].includes(testApproachData.description.substring(0, 30))) {
      console.log('‚úÖ Description mise √† jour correctement');
      changesDetected++;
    } else {
      console.log('‚ùå Description non mise √† jour');
    }
    
    // V√©rifier la vid√©o
    const newVideoMatch = htmlAfter.match(/<source src="([^"]+)"/);
    if (newVideoMatch && newVideoMatch[1] === testApproachData.video.url) {
      console.log('‚úÖ Vid√©o mise √† jour correctement');
      changesDetected++;
    } else {
      console.log(`‚ùå Vid√©o non mise √† jour. Attendu: "${testApproachData.video.url}", Trouv√©: "${newVideoMatch ? newVideoMatch[1] : 'Non trouv√©'}"`);
    }
    
    // V√©rifier le CTA
    const newCtaMatch = htmlAfter.match(/<div class="text-link is-footer">\s*([^<]+)\s*<\/div>/);
    if (newCtaMatch && newCtaMatch[1].trim() === testApproachData.ctaText) {
      console.log('‚úÖ CTA mis √† jour correctement');
      changesDetected++;
    } else {
      console.log(`‚ùå CTA non mis √† jour. Attendu: "${testApproachData.ctaText}", Trouv√©: "${newCtaMatch ? newCtaMatch[1].trim() : 'Non trouv√©'}"`);
    }

    // V√©rifier les √©tapes
    const stepTitles = [...htmlAfter.matchAll(/<div class="u-text-style-big u-color-dark">\s*([^<]+)\s*<\/div>/g)];
    if (stepTitles.length >= testApproachData.steps.length) {
      let stepsUpdated = 0;
      for (let i = 0; i < testApproachData.steps.length; i++) {
        if (stepTitles[i] && stepTitles[i][1].trim() === testApproachData.steps[i].title) {
          stepsUpdated++;
        }
      }
      if (stepsUpdated === testApproachData.steps.length) {
        console.log('‚úÖ √âtapes mises √† jour correctement');
        changesDetected++;
      } else {
        console.log(`‚ùå √âtapes partiellement mises √† jour (${stepsUpdated}/${testApproachData.steps.length})`);
      }
    } else {
      console.log('‚ùå √âtapes non trouv√©es dans le HTML');
    }

    console.log('\nüéâ Test de publication termin√© !');
    console.log(`üìä R√©sultat: ${changesDetected}/5 √©l√©ments mis √† jour correctement`);
    
    if (changesDetected === 5) {
      console.log('‚úÖ Publication HTML parfaitement fonctionnelle !');
    } else if (changesDetected >= 3) {
      console.log('‚ö†Ô∏è Publication HTML partiellement fonctionnelle');
    } else {
      console.log('‚ùå Publication HTML n√©cessite des corrections');
    }

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    
    if (error.response) {
      console.error(`   - Status: ${error.response.status}`);
      console.error(`   - Message: ${error.response.data?.message || 'Erreur inconnue'}`);
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.error('\nüí° Assurez-vous que le serveur backend est d√©marr√© sur le port 8000');
    }
  }
}

// Ex√©cuter le test
testApproachPublish();