#!/usr/bin/env node

/**
 * Test complet d'int√©gration pour la section Approach
 * Valide l'interface utilisateur, l'API et la publication HTML
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:8000/api';

async function testCompleteIntegration() {
  console.log('üß™ Test complet d\'int√©gration - Section Approach');
  console.log('='.repeat(60));

  try {
    // 1. Test de l'API - R√©cup√©ration
    console.log('\n1Ô∏è‚É£ Test API - R√©cup√©ration des donn√©es...');
    const getResponse = await axios.get(`${API_BASE_URL}/services/approach`);
    
    if (getResponse.status === 200) {
      console.log('‚úÖ API - R√©cup√©ration r√©ussie');
      console.log(`   - Titre: ${getResponse.data.data.title || 'Non d√©fini'}`);
      console.log(`   - Description: ${getResponse.data.data.description?.substring(0, 50)}...`);
      console.log(`   - Vid√©o: ${getResponse.data.data.video?.url || 'Non d√©finie'}`);
      console.log(`   - CTA: ${getResponse.data.data.ctaText || 'Non d√©fini'}`);
      console.log(`   - √âtapes: ${getResponse.data.data.steps?.length || 0}`);
    } else {
      console.log('‚ùå API - √âchec de la r√©cup√©ration');
      return;
    }

    // 2. Test de l'API - Sauvegarde avec nouvelles donn√©es
    console.log('\n2Ô∏è‚É£ Test API - Sauvegarde avec nouvelles donn√©es...');
    const testData = {
      title: "Mon Approche Unique",
      description: "Une approche personnalis√©e pour chaque projet, bas√©e sur l'exp√©rience et l'innovation.",
      video: {
        url: "https://vbportfolio.nyc3.cdn.digitaloceanspaces.com/sweet-spot-60fps.mp4",
        caption: "D√©monstration de l'approche",
        autoplay: true,
        loop: true,
        muted: true
      },
      ctaText: "Discutons de votre projet !",
      ctaUrl: "/contact",
      steps: [
        {
          id: "step-1",
          number: 1,
          title: "Analyse",
          description: "Analyse approfondie de vos besoins et objectifs.",
          icon: "",
          order: 1
        },
        {
          id: "step-2",
          number: 2,
          title: "Conception",
          description: "Conception de la solution adapt√©e √† vos besoins.",
          icon: "",
          order: 2
        },
        {
          id: "step-3",
          number: 3,
          title: "D√©veloppement",
          description: "D√©veloppement avec les meilleures pratiques.",
          icon: "",
          order: 3
        },
        {
          id: "step-4",
          number: 4,
          title: "Livraison",
          description: "Livraison et accompagnement pour la mise en ligne.",
          icon: "",
          order: 4
        }
      ]
    };

    const updateResponse = await axios.put(`${API_BASE_URL}/services/approach`, testData);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ API - Sauvegarde r√©ussie');
      console.log(`   - Message: ${updateResponse.data.message}`);
    } else {
      console.log('‚ùå API - √âchec de la sauvegarde');
      return;
    }

    // 3. Test de l'API - V√©rification de la persistance
    console.log('\n3Ô∏è‚É£ Test API - V√©rification de la persistance...');
    const verifyResponse = await axios.get(`${API_BASE_URL}/services/approach`);
    
    if (verifyResponse.status === 200) {
      const savedData = verifyResponse.data.data;
      let persistenceScore = 0;
      
      if (savedData.title === testData.title) {
        console.log('‚úÖ Titre persist√© correctement');
        persistenceScore++;
      } else {
        console.log(`‚ùå Titre incorrect - Attendu: "${testData.title}", Re√ßu: "${savedData.title}"`);
      }
      
      if (savedData.description === testData.description) {
        console.log('‚úÖ Description persist√©e correctement');
        persistenceScore++;
      } else {
        console.log('‚ùå Description incorrecte');
      }
      
      if (savedData.video && savedData.video.url === testData.video.url) {
        console.log('‚úÖ Vid√©o persist√©e correctement');
        persistenceScore++;
      } else {
        console.log('‚ùå Vid√©o incorrecte');
      }
      
      if (savedData.ctaText === testData.ctaText) {
        console.log('‚úÖ CTA persist√© correctement');
        persistenceScore++;
      } else {
        console.log('‚ùå CTA incorrect');
      }
      
      if (savedData.steps && savedData.steps.length === testData.steps.length) {
        console.log('‚úÖ √âtapes persist√©es correctement');
        persistenceScore++;
      } else {
        console.log('‚ùå √âtapes incorrectes');
      }
      
      console.log(`üìä Score de persistance: ${persistenceScore}/5`);
    }

    // 4. Test de publication
    console.log('\n4Ô∏è‚É£ Test de publication...');
    const publishResponse = await axios.post(`${API_BASE_URL}/services/publish`);
    
    if (publishResponse.status === 200) {
      console.log('‚úÖ Publication r√©ussie');
      console.log(`   - Message: ${publishResponse.data.message}`);
    } else {
      console.log('‚ùå √âchec de la publication');
    }

    // 5. Test de validation avec donn√©es invalides
    console.log('\n5Ô∏è‚É£ Test de validation...');
    const invalidData = {
      title: "", // Titre vide
      description: "",
      video: {
        url: "invalid-url", // URL invalide
        autoplay: true,
        loop: true,
        muted: true
      },
      ctaText: "",
      ctaUrl: "",
      steps: [] // Pas d'√©tapes
    };
    
    try {
      await axios.put(`${API_BASE_URL}/services/approach`, invalidData);
      console.log('‚ùå La validation devrait √©chouer');
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Validation fonctionne - donn√©es invalides rejet√©es');
      } else {
        console.log('‚ùå Erreur inattendue lors de la validation');
      }
    }

    // 6. Restaurer les donn√©es originales
    console.log('\n6Ô∏è‚É£ Restauration des donn√©es originales...');
    const originalData = getResponse.data.data;
    await axios.put(`${API_BASE_URL}/services/approach`, originalData);
    console.log('‚úÖ Donn√©es originales restaur√©es');

    console.log('\nüéâ Test complet termin√© avec succ√®s !');
    console.log('\nüìã R√©sum√© des fonctionnalit√©s test√©es:');
    console.log('   ‚úÖ R√©cup√©ration des donn√©es via API');
    console.log('   ‚úÖ Sauvegarde des donn√©es via API');
    console.log('   ‚úÖ Persistance des donn√©es');
    console.log('   ‚úÖ Publication des changements');
    console.log('   ‚úÖ Validation des donn√©es');
    console.log('   ‚úÖ Restauration des donn√©es');
    
    console.log('\nüí° Interface utilisateur:');
    console.log('   - Le bouton "Sauvegarder" devrait s\'activer apr√®s modification');
    console.log('   - Le bouton "Annuler" devrait restaurer les donn√©es originales');
    console.log('   - Les champs titre, vid√©o et CTA sont maintenant disponibles');
    console.log('   - L\'aper√ßu montre la structure compl√®te de la section');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    
    if (error.response) {
      console.error(`   - Status: ${error.response.status}`);
      console.error(`   - Message: ${error.response.data?.message || 'Erreur inconnue'}`);
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.error('\nüí° Assurez-vous que le serveur backend est d√©marr√© sur le port 8000');
      console.error('   Commande: npm run dev (dans le dossier cms/backend)');
    }
  }
}

// Ex√©cuter le test
testCompleteIntegration();